from asyncpg import UniqueViolationError
from utils.db_api.schemas.user import User
from utils.db_api.db_gino import db

async def add_user(user_id: int, username: str):
    try:
        user = User(user_id=user_id, username=username)
        await user.create()
        return '–ü—Ä–∏–≤–µ—Çüëã \n–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –¥–ª—è —Ç–µ–±—è —Å–ª–æ–≤–∞ –∏ —Ç–µ–∫—Å—Ç—ã —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç. –ê —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞—Å—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—èüôÉ'
    except UniqueViolationError:
        return '–ò –µ—â–µ —Ä–∞–∑ –ø—Ä–∏–≤–µ—Çü§ö \n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π  /help'


async def select_all_user():
    users = await User.query.gino.all()
    return users

async def count_users():
    count = await db.func.count(User.user_id).gino.scalar()
    return count

async def select_user(user_id):
    user = await User.query.where(User.user_id == user_id).gino.first()
    return user

async def update_user_name(user_id, new_name):
    user = await select_user(user_id)
    await user.update(update_name=new_name).apply()